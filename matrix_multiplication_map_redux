Google Classroom
Classroom
7CAI4-21 Big Data Analytics Lab
VII D n G
Home
Calendar
Enrolled
To do
7
7CAI4-21 Big Data Analytics Lab
VII D n G
7
7AID-PR/7CS-PR/7CAI-PR Project-2023-24
Section- D,E,F,G
6
6AID4-05(6ADD)
D
6
6AID4-03
D SECTION
2
2022-23 Digital Image Processiong
6AID3-01
N
Natural Language Processing
6ADD
4
4CS4-07-SEC D-DCCN-2021-22
D
M
ML
D
5
5CS4-04
A
Assignment 1
D,G
C
Compiler Design-5CS4-02
Section-D
O
Operating System 5CS4-03
D
I
Industrial Training
III-D
5
5CSD - 5AID5-11 - BlockChain Fundamentals
T
Theory of Computations
B Tech IV Sem Sec D and G
D
Data Structures and Algorithms (3CSD)2021-22
D
3
3CS3-04 SEC.D_2021-22
D
S
Software Engineering
3CSD
T
TECHNICAL COMMUNICATION PIET 2021
D
Archived classes
Settings
Material details
Experiment 6
Anurag Anand Duvey
•
30 Oct

Matrix Multiplication with MapReduc.txt
Text
Class comments

Add class comment…

Matrix Multiplication with MapReduce

import java.io.IOException;
import java.util.*;
import java.util.AbstractMap.SimpleEntry;
import java.util.Map.Entry;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
public class TwoStepMatrixMultiplication {
public static class Map extends Mapper<LongWritable, Text,
Text, Text> {
public void map(LongWritable key, Text value, Context
context) throws IOException, InterruptedException {
String line = value.toString();
String[] indicesAndValue = line.split(",");
Text outputKey = new Text();
Text outputValue = new Text();
if (indicesAndValue[0].equals("A")) {
outputKey.set(indicesAndValue[2]);
outputValue.set("A," + indicesAndValue[1] + "," +
indicesAndValue[3]);
context.write(outputKey, outputValue);
} else {
outputKey.set(indicesAndValue[1]);
outputValue.set("B," + indicesAndValue[2] + "," +
indicesAndValue[3]);
context.write(outputKey, outputValue);
}
}
}
public static class Reduce extends Reducer<Text, Text, Text,
Text> {
public void reduce(Text key, Iterable<Text> values,
Context context) throws IOException, InterruptedException {
String[] value;
ArrayList<Entry<Integer, Float>> listA = new
ArrayList<Entry<Integer, Float>>();
ArrayList<Entry<Integer, Float>> listB = new
ArrayList<Entry<Integer, Float>>();
for (Text val : values) {
value = val.toString().split(",");
if (value[0].equals("A")) {
listA.add(new SimpleEntry<Integer,
Float>(Integer.parseInt(value[1]), Float.parseFloat(value[2])));
} else {
listB.add(new SimpleEntry<Integer,
Float>(Integer.parseInt(value[1]), Float.parseFloat(value[2])));
}
}
String i;
float a_ij;
String k;
float b_jk;
Text outputValue = new Text();
for (Entry<Integer, Float> a : listA) {
i = Integer.toString(a.getKey());
a_ij = a.getValue();
for (Entry<Integer, Float> b : listB) {
k = Integer.toString(b.getKey());
b_jk = b.getValue();
outputValue.set(i + "," + k + "," +
Float.toString(a_ij*b_jk));
context.write(null, outputValue);
}
}
}
}
public static void main(String[] args) throws Exception {
Configuration conf = new Configuration();
Job job = new Job(conf,
"MatrixMatrixMultiplicationTwoSteps");
job.setJarByClass(TwoStepMatrixMultiplication.class);
job.setOutputKeyClass(Text.class);
job.setOutputValueClass(Text.class);
job.setMapperClass(Map.class);
job.setReducerClass(Reduce.class);
job.setInputFormatClass(TextInputFormat.class);
job.setOutputFormatClass(TextOutputFormat.class);
FileInputFormat.addInputPath(job, new Path("hdfs://
127.0.0.1:9000/matrixin"));
FileOutputFormat.setOutputPath(job, new Path("hdfs://
127.0.0.1:9000/matrixout"));
job.waitForCompletion(true);
}
}
Matrix Multiplication with MapReduc.txt
Displaying Matrix Multiplication with MapReduc.txt.